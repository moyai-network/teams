// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ports/ports.go
//
// Generated by this command:
//
//	mockgen -destination tests/mocks/ports.go -package mocks -source ./internal/ports/ports.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	iter "iter"
	reflect "reflect"

	cube "github.com/df-mc/dragonfly/server/block/cube"
	effect "github.com/df-mc/dragonfly/server/entity/effect"
	item "github.com/df-mc/dragonfly/server/item"
	mgl64 "github.com/go-gl/mathgl/mgl64"
	model "github.com/moyai-network/teams/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockUserRepository) FindAll() iter.Seq[model.User] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(iter.Seq[model.User])
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserRepository)(nil).FindAll))
}

// FindByName mocks base method.
func (m *MockUserRepository) FindByName(name string) (model.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockUserRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockUserRepository)(nil).FindByName), name)
}

// Save mocks base method.
func (m *MockUserRepository) Save(arg0 model.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0)
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), arg0)
}

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
	isgomock struct{}
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTeamRepository) Delete(arg0 model.Team) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockTeamRepositoryMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamRepository)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockTeamRepository) FindAll() iter.Seq[model.Team] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(iter.Seq[model.Team])
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTeamRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTeamRepository)(nil).FindAll))
}

// FindByMemberName mocks base method.
func (m *MockTeamRepository) FindByMemberName(name string) (model.Team, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMemberName", name)
	ret0, _ := ret[0].(model.Team)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByMemberName indicates an expected call of FindByMemberName.
func (mr *MockTeamRepositoryMockRecorder) FindByMemberName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMemberName", reflect.TypeOf((*MockTeamRepository)(nil).FindByMemberName), name)
}

// FindByName mocks base method.
func (m *MockTeamRepository) FindByName(name string) (model.Team, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(model.Team)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockTeamRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockTeamRepository)(nil).FindByName), name)
}

// Save mocks base method.
func (m *MockTeamRepository) Save(arg0 model.Team) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0)
}

// Save indicates an expected call of Save.
func (mr *MockTeamRepositoryMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTeamRepository)(nil).Save), arg0)
}

// MockCrate is a mock of Crate interface.
type MockCrate struct {
	ctrl     *gomock.Controller
	recorder *MockCrateMockRecorder
	isgomock struct{}
}

// MockCrateMockRecorder is the mock recorder for MockCrate.
type MockCrateMockRecorder struct {
	mock *MockCrate
}

// NewMockCrate creates a new mock instance.
func NewMockCrate(ctrl *gomock.Controller) *MockCrate {
	mock := &MockCrate{ctrl: ctrl}
	mock.recorder = &MockCrateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrate) EXPECT() *MockCrateMockRecorder {
	return m.recorder
}

// Facing mocks base method.
func (m *MockCrate) Facing() cube.Face {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Facing")
	ret0, _ := ret[0].(cube.Face)
	return ret0
}

// Facing indicates an expected call of Facing.
func (mr *MockCrateMockRecorder) Facing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Facing", reflect.TypeOf((*MockCrate)(nil).Facing))
}

// Name mocks base method.
func (m *MockCrate) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCrateMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCrate)(nil).Name))
}

// Position mocks base method.
func (m *MockCrate) Position() mgl64.Vec3 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Position")
	ret0, _ := ret[0].(mgl64.Vec3)
	return ret0
}

// Position indicates an expected call of Position.
func (mr *MockCrateMockRecorder) Position() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Position", reflect.TypeOf((*MockCrate)(nil).Position))
}

// Rewards mocks base method.
func (m *MockCrate) Rewards() []model.Reward {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rewards")
	ret0, _ := ret[0].([]model.Reward)
	return ret0
}

// Rewards indicates an expected call of Rewards.
func (mr *MockCrateMockRecorder) Rewards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewards", reflect.TypeOf((*MockCrate)(nil).Rewards))
}

// MockClass is a mock of Class interface.
type MockClass struct {
	ctrl     *gomock.Controller
	recorder *MockClassMockRecorder
	isgomock struct{}
}

// MockClassMockRecorder is the mock recorder for MockClass.
type MockClassMockRecorder struct {
	mock *MockClass
}

// NewMockClass creates a new mock instance.
func NewMockClass(ctrl *gomock.Controller) *MockClass {
	mock := &MockClass{ctrl: ctrl}
	mock.recorder = &MockClassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClass) EXPECT() *MockClassMockRecorder {
	return m.recorder
}

// Armour mocks base method.
func (m *MockClass) Armour() [4]item.ArmourTier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Armour")
	ret0, _ := ret[0].([4]item.ArmourTier)
	return ret0
}

// Armour indicates an expected call of Armour.
func (mr *MockClassMockRecorder) Armour() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Armour", reflect.TypeOf((*MockClass)(nil).Armour))
}

// Effects mocks base method.
func (m *MockClass) Effects() []effect.Effect {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Effects")
	ret0, _ := ret[0].([]effect.Effect)
	return ret0
}

// Effects indicates an expected call of Effects.
func (mr *MockClassMockRecorder) Effects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Effects", reflect.TypeOf((*MockClass)(nil).Effects))
}
